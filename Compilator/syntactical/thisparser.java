
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 28 12:05:37 CEST 2018
//----------------------------------------------------

package syntactical;

import lexical.Lexanalizer;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import errores.ExcpSyn;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import items.basic.*;
import items.conjuntos.*;
import items.declaraciones.*;
import items.expresiones.*;
import items.instrucciones.*;

/** CUP v0.10k generated parser.
  * @version Thu Jun 28 12:05:37 CEST 2018
  */
public class thisparser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public thisparser() {super();}

  /** Constructor which sets the default scanner. */
  public thisparser(java_cup.runtime.Scanner s) {super(s);}
    public thisparser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\003\003\000\002\017" +
    "\004\000\002\017\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\010\011\000\002\010\015\000\002\011\011\000\002\006" +
    "\006\000\002\024\003\000\002\024\005\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\003\000" +
    "\002\026\005\000\002\012\010\000\002\021\005\000\002" +
    "\021\003\000\002\022\005\000\002\022\003\000\002\027" +
    "\006\000\002\027\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\013\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\007\025\000\002\007\023\000\002" +
    "\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\016\007\001\002\000\006\002\ufffe\016" +
    "\ufffe\001\002\000\004\002\206\001\002\000\006\002\000" +
    "\016\007\001\002\000\004\054\010\001\002\000\004\017" +
    "\011\001\002\000\004\010\012\001\002\000\014\006\022" +
    "\011\016\035\021\036\017\037\015\001\002\000\006\007" +
    "\uffcd\011\uffcd\001\002\000\010\007\ufff1\011\ufff1\033\ufff1" +
    "\001\002\000\012\007\uffef\011\uffef\021\uffef\033\uffef\001" +
    "\002\000\004\020\171\001\002\000\012\007\uffee\011\uffee" +
    "\021\uffee\033\uffee\001\002\000\006\007\031\011\032\001" +
    "\002\000\012\007\uffed\011\uffed\021\uffed\033\uffed\001\002" +
    "\000\004\055\025\001\002\000\012\012\uffec\035\uffec\036" +
    "\uffec\037\uffec\001\002\000\012\012\027\035\021\036\017" +
    "\037\015\001\002\000\050\007\uffe3\011\uffe3\012\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\052\uffe3\053\uffe3\001\002\000\010\007\ufff0\011\ufff0" +
    "\033\ufff0\001\002\000\004\055\025\001\002\000\012\012" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\001\002\000\012\006\022" +
    "\035\021\036\017\037\015\001\002\000\004\020\033\001" +
    "\002\000\010\035\021\036\017\037\015\001\002\000\004" +
    "\021\035\001\002\000\004\010\036\001\002\000\004\054" +
    "\037\001\002\000\006\007\uffe8\011\uffe8\001\002\000\006" +
    "\007\041\011\042\001\002\000\004\054\167\001\002\000" +
    "\004\022\043\001\002\000\004\013\044\001\002\000\016" +
    "\004\062\016\007\024\056\026\061\030\045\054\057\001" +
    "\002\000\004\010\161\001\002\000\004\015\157\001\002" +
    "\000\004\033\156\001\002\000\020\004\062\016\007\023" +
    "\152\024\056\026\061\030\045\054\057\001\002\000\022" +
    "\004\ufffa\014\ufffa\016\ufffa\023\ufffa\024\ufffa\026\ufffa\030" +
    "\ufffa\054\ufffa\001\002\000\022\004\ufff8\014\ufff8\016\ufff8" +
    "\023\ufff8\024\ufff8\026\ufff8\030\ufff8\054\ufff8\001\002\000" +
    "\004\033\151\001\002\000\004\033\150\001\002\000\022" +
    "\004\ufffd\014\ufffd\016\ufffd\023\ufffd\024\ufffd\026\ufffd\030" +
    "\ufffd\054\ufffd\001\002\000\004\054\143\001\002\000\044" +
    "\007\uffe4\011\uffe4\015\uffe4\031\135\032\uffe4\033\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\052\uffe4\053\uffe4\001\002\000\022\004" +
    "\ufff9\014\ufff9\016\ufff9\023\ufff9\024\ufff9\026\ufff9\030\ufff9" +
    "\054\ufff9\001\002\000\004\010\066\001\002\000\004\054" +
    "\063\001\002\000\004\005\064\001\002\000\012\006\022" +
    "\035\021\036\017\037\015\001\002\000\004\033\ufff2\001" +
    "\002\000\014\024\056\054\057\055\025\057\071\060\073" +
    "\001\002\000\040\007\uffdf\011\uffdf\032\uffdf\033\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\052\uffdf\053\uffdf\001\002\000\040\007" +
    "\uffde\011\uffde\032\uffde\033\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\052" +
    "\uffde\053\uffde\001\002\000\040\007\uffe2\011\uffe2\032\uffe2" +
    "\033\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\053\uffe2\001\002" +
    "\000\040\007\uffd4\011\uffd4\032\uffd4\033\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\052\uffd4\053\uffd4\001\002\000\040\007\uffe1\011" +
    "\uffe1\032\uffe1\033\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1\053" +
    "\uffe1\001\002\000\032\011\111\040\103\041\100\042\102" +
    "\043\105\044\104\045\101\046\076\047\077\050\107\052" +
    "\110\053\106\001\002\000\040\007\uffd5\011\uffd5\032\uffd5" +
    "\033\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\001\002" +
    "\000\014\024\056\054\057\055\025\057\071\060\073\001" +
    "\002\000\014\024\056\054\057\055\025\057\071\060\073" +
    "\001\002\000\014\024\056\054\057\055\025\057\071\060" +
    "\073\001\002\000\014\024\056\054\057\055\025\057\071" +
    "\060\073\001\002\000\014\024\056\054\057\055\025\057" +
    "\071\060\073\001\002\000\014\024\056\054\057\055\025" +
    "\057\071\060\073\001\002\000\014\024\056\054\057\055" +
    "\025\057\071\060\073\001\002\000\014\024\056\054\057" +
    "\055\025\057\071\060\073\001\002\000\014\024\056\054" +
    "\057\055\025\057\071\060\073\001\002\000\014\024\056" +
    "\054\057\055\025\057\071\060\073\001\002\000\014\024" +
    "\056\054\057\055\025\057\071\060\073\001\002\000\004" +
    "\013\112\001\002\000\016\004\062\016\007\024\056\026" +
    "\061\030\045\054\057\001\002\000\020\004\062\014\115" +
    "\016\007\024\056\026\061\030\045\054\057\001\002\000" +
    "\022\004\ufffc\014\ufffc\016\ufffc\023\ufffc\024\ufffc\026\ufffc" +
    "\030\ufffc\054\ufffc\001\002\000\024\004\ufff5\014\ufff5\016" +
    "\ufff5\023\ufff5\024\ufff5\026\ufff5\027\116\030\ufff5\054\ufff5" +
    "\001\002\000\004\013\117\001\002\000\016\004\062\016" +
    "\007\024\056\026\061\030\045\054\057\001\002\000\020" +
    "\004\062\014\121\016\007\024\056\026\061\030\045\054" +
    "\057\001\002\000\022\004\ufff4\014\ufff4\016\ufff4\023\ufff4" +
    "\024\ufff4\026\ufff4\030\ufff4\054\ufff4\001\002\000\040\007" +
    "\uffdc\011\uffdc\032\uffdc\033\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\105\044\104\045\101\046\076\047\077\050\107\052" +
    "\uffdc\053\uffdc\001\002\000\040\007\uffda\011\uffda\032\uffda" +
    "\033\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\052\uffda\053\uffda\001\002" +
    "\000\040\007\uffdd\011\uffdd\032\uffdd\033\uffdd\040\103\041" +
    "\100\042\uffdd\043\105\044\104\045\101\046\076\047\077" +
    "\050\107\052\110\053\uffdd\001\002\000\040\007\uffdb\011" +
    "\uffdb\032\uffdb\033\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\052\uffdb\053" +
    "\uffdb\001\002\000\040\007\uffd8\011\uffd8\032\uffd8\033\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\105\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\107\052\uffd8\053\uffd8\001\002\000\040" +
    "\007\uffd3\011\uffd3\032\uffd3\033\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\105\044\104\045\101\046\076\047\077\050\107" +
    "\052\uffd3\053\uffd3\001\002\000\040\007\uffd1\011\uffd1\032" +
    "\uffd1\033\uffd1\040\103\041\100\042\uffd1\043\105\044\104" +
    "\045\101\046\076\047\077\050\107\052\110\053\uffd1\001" +
    "\002\000\040\007\uffd9\011\uffd9\032\uffd9\033\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\105\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\107\052\uffd9\053\uffd9\001\002\000\040\007\uffd2" +
    "\011\uffd2\032\uffd2\033\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\105\044\104\045\101\046\076\047\077\050\107\052\uffd2" +
    "\053\uffd2\001\002\000\040\007\uffd6\011\uffd6\032\uffd6\033" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\105\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\107\052\uffd6\053\uffd6\001\002\000" +
    "\040\007\uffd7\011\uffd7\032\uffd7\033\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\105\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\107\052\uffd7\053\uffd7\001\002\000\014\024\056\054\057" +
    "\055\025\057\071\060\073\001\002\000\006\007\140\032" +
    "\141\001\002\000\036\007\uffe6\011\uffe6\032\uffe6\040\103" +
    "\041\100\042\102\043\105\044\104\045\101\046\076\047" +
    "\077\050\107\052\110\053\106\001\002\000\014\024\056" +
    "\054\057\055\025\057\071\060\073\001\002\000\042\007" +
    "\uffe5\011\uffe5\015\uffe5\032\uffe5\033\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\052\uffe5\053\uffe5\001\002\000\036\007\uffe7\011\uffe7" +
    "\032\uffe7\040\103\041\100\042\102\043\105\044\104\045" +
    "\101\046\076\047\077\050\107\052\110\053\106\001\002" +
    "\000\004\025\144\001\002\000\004\010\145\001\002\000" +
    "\014\024\056\054\057\055\025\057\071\060\073\001\002" +
    "\000\006\007\140\011\147\001\002\000\040\007\uffea\011" +
    "\uffea\032\uffea\033\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\052\uffea\053" +
    "\uffea\001\002\000\022\004\ufffb\014\ufffb\016\ufffb\023\ufffb" +
    "\024\ufffb\026\ufffb\030\ufffb\054\ufffb\001\002\000\022\004" +
    "\ufff6\014\ufff6\016\ufff6\023\ufff6\024\ufff6\026\ufff6\030\ufff6" +
    "\054\ufff6\001\002\000\014\024\056\054\057\055\025\057" +
    "\071\060\073\001\002\000\032\033\154\040\103\041\100" +
    "\042\102\043\105\044\104\045\101\046\076\047\077\050" +
    "\107\052\110\053\106\001\002\000\004\014\155\001\002" +
    "\000\024\002\uffd0\004\uffd0\014\uffd0\016\uffd0\023\uffd0\024" +
    "\uffd0\026\uffd0\030\uffd0\054\uffd0\001\002\000\022\004\ufff7" +
    "\014\ufff7\016\ufff7\023\ufff7\024\ufff7\026\ufff7\030\ufff7\054" +
    "\ufff7\001\002\000\014\024\056\054\057\055\025\057\071" +
    "\060\073\001\002\000\032\033\uffe0\040\103\041\100\042" +
    "\102\043\105\044\104\045\101\046\076\047\077\050\107" +
    "\052\110\053\106\001\002\000\014\024\056\054\057\055" +
    "\025\057\071\060\073\001\002\000\032\011\163\040\103" +
    "\041\100\042\102\043\105\044\104\045\101\046\076\047" +
    "\077\050\107\052\110\053\106\001\002\000\004\013\164" +
    "\001\002\000\016\004\062\016\007\024\056\026\061\030" +
    "\045\054\057\001\002\000\020\004\062\014\166\016\007" +
    "\024\056\026\061\030\045\054\057\001\002\000\022\004" +
    "\ufff3\014\ufff3\016\ufff3\023\ufff3\024\ufff3\026\ufff3\030\ufff3" +
    "\054\ufff3\001\002\000\006\007\uffe9\011\uffe9\001\002\000" +
    "\006\007\uffce\011\uffce\001\002\000\010\035\021\036\017" +
    "\037\015\001\002\000\004\021\173\001\002\000\004\010" +
    "\174\001\002\000\004\011\175\001\002\000\004\022\176" +
    "\001\002\000\004\013\177\001\002\000\016\004\062\016" +
    "\007\024\056\026\061\030\045\054\057\001\002\000\020" +
    "\004\062\016\007\023\201\024\056\026\061\030\045\054" +
    "\057\001\002\000\014\024\056\054\057\055\025\057\071" +
    "\060\073\001\002\000\032\033\203\040\103\041\100\042" +
    "\102\043\105\044\104\045\101\046\076\047\077\050\107" +
    "\052\110\053\106\001\002\000\004\014\204\001\002\000" +
    "\024\002\uffcf\004\uffcf\014\uffcf\016\uffcf\023\uffcf\024\uffcf" +
    "\026\uffcf\030\uffcf\054\uffcf\001\002\000\006\002\uffff\016" +
    "\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\010\003\004\007\003\017\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\017\024\012\025\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\022\026\023\001\001\000\002\001\001\000\004\025" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\027\001\001\000\002\001\001\000\006\024\167\025" +
    "\013\001\001\000\002\001\001\000\004\025\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\047\005" +
    "\054\006\053\007\050\010\057\011\051\012\046\013\052" +
    "\027\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\113\006\053\007\050\010\057" +
    "\011\051\012\046\013\052\027\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\064\025\013\001\001\000\002\001" +
    "\001\000\014\012\067\014\073\015\071\016\074\027\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\067\014\133\015\071\016" +
    "\074\027\066\001\001\000\014\012\067\014\132\015\071" +
    "\016\074\027\066\001\001\000\014\012\067\014\131\015" +
    "\071\016\074\027\066\001\001\000\014\012\067\014\130" +
    "\015\071\016\074\027\066\001\001\000\014\012\067\014" +
    "\127\015\071\016\074\027\066\001\001\000\014\012\067" +
    "\014\126\015\071\016\074\027\066\001\001\000\014\012" +
    "\067\014\125\015\071\016\074\027\066\001\001\000\014" +
    "\012\067\014\124\015\071\016\074\027\066\001\001\000" +
    "\014\012\067\014\123\015\071\016\074\027\066\001\001" +
    "\000\014\012\067\014\122\015\071\016\074\027\066\001" +
    "\001\000\014\012\067\014\121\015\071\016\074\027\066" +
    "\001\001\000\002\001\001\000\024\004\112\005\054\006" +
    "\053\007\050\010\057\011\051\012\046\013\052\027\045" +
    "\001\001\000\022\005\113\006\053\007\050\010\057\011" +
    "\051\012\046\013\052\027\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\117\005" +
    "\054\006\053\007\050\010\057\011\051\012\046\013\052" +
    "\027\045\001\001\000\022\005\113\006\053\007\050\010" +
    "\057\011\051\012\046\013\052\027\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\067\014\136" +
    "\015\071\016\074\022\135\027\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\067\014\141\015\071" +
    "\016\074\027\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\067" +
    "\014\136\015\071\016\074\022\145\027\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\067\014\152\015\071\016\074\027" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\067\014\157\015" +
    "\071\016\074\027\066\001\001\000\002\001\001\000\014" +
    "\012\067\014\161\015\071\016\074\027\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\164\005\054" +
    "\006\053\007\050\010\057\011\051\012\046\013\052\027" +
    "\045\001\001\000\022\005\113\006\053\007\050\010\057" +
    "\011\051\012\046\013\052\027\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\177" +
    "\005\054\006\053\007\050\010\057\011\051\012\046\013" +
    "\052\027\045\001\001\000\022\005\113\006\053\007\050" +
    "\010\057\011\051\012\046\013\052\027\045\001\001\000" +
    "\014\012\067\014\201\015\071\016\074\027\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   Lexanalizer alex = (Lexanalizer)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	return getScanner().next_token();

    }

 
    public void syntax_error(Symbol unidadLexica){
				ExcpSyn.excpSyn(unidadLexica);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final thisparser parser;

  /** Constructor */
  CUP$parser$actions(thisparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Lista_tipos ::= TipoG 
            {
              Lista RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoG t = (TipoG)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista(t); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Lista_tipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Lista_tipos ::= Lista_tipos SEP TipoG 
            {
              Lista RESULT = null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lista lt = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoG t = (TipoG)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 lt.add(t); RESULT = lt; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Lista_tipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Decl_funcion ::= PRINCFUN IDV ENTRTIPFUNC PAP PCI SALTIPFUNC Tipo ENTRIMPLFUNC PAP PCI SALIMPLFUNC CORCHAPERTURA Bloque RESULTADO Expresion FIN CORCHCIERRE 
            {
              DeclF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclF(i, new Lista(), t, new Lista(), b, e, ileft); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Decl_funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Decl_funcion ::= PRINCFUN IDV ENTRTIPFUNC PAP Lista_tipos PCI SALTIPFUNC Tipo ENTRIMPLFUNC PAP Lista_vars PCI SALIMPLFUNC CORCHAPERTURA Bloque RESULTADO Expresion FIN CORCHCIERRE 
            {
              DeclF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Lista lt = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Lista lv = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclF(i, lt, t, lv, b, e, ileft); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Decl_funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion POR Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.POR, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion MENOS Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.MENOS, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion MAS Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.MAS, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Constante_aritmetica 
            {
              Expr RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NumConst c = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(c, cleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= Constante_booleana 
            {
              Expr RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		BoolConst b = (BoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(b, bleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= Expresion MAYOROIGUAL Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.MAYOROIGUAL, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion MENOROIGUAL Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.MENOROIGUAL, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= Expresion MAYOR Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.MAYOR, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Expresion MENOR Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.MENOR, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= Expresion DIFF Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.DIFF, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= Expresion IGUAL Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.IGUAL, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= Expresion DIS Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.DIS, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= Expresion CON Expresion 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(e1, e2, Operadores.CON, e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= Invocacion 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		InstDo i = (InstDo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(i, ileft); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= Variable 
            {
              Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(v, vleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Asignacion ::= Variable ASIGN Expresion 
            {
              InstAsign RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new InstAsign(v, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Constante_booleana ::= FALSE 
            {
              BoolConst RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		boolean f = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BoolConst(false, fleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Constante_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Constante_booleana ::= TRUE 
            {
              BoolConst RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		boolean t = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BoolConst(true, tleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Constante_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Constante_aritmetica ::= NUMENT 
            {
              NumConst RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NumConst(n, nleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Constante_aritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Variable ::= IDV 
            {
              Variable RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Variable(i, null, ileft); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Variable ::= IDV ACCESO Lista_expr CIERRE 
            {
              Variable RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista l = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Variable(i, l, ileft); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lista_expr ::= Expresion 
            {
              Lista RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Lista_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_expr ::= Lista_expr SEP Expresion 
            {
              Lista RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lista l = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Lista_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lista_vars ::= IDV 
            {
              Lista RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Lista_vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Lista_vars ::= Lista_vars SEP IDV 
            {
              Lista RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lista l = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(v); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Lista_vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Invocacion ::= LLAMADA IDV PARAM PAP Lista_expr PCI 
            {
              InstDo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista p = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstDo(i, p, ileft); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Invocacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dimension ::= Dimension DIMSEP Constante_aritmetica 
            {
              Dimension RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dimension d = (Dimension)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NumConst c = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 d.add(c); RESULT = d;
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Dimension*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dimension ::= Constante_aritmetica 
            {
              Dimension RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NumConst c = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Dimension(c, cleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Dimension*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= NULL 
            {
              Tipo RESULT = null;
		 RESULT = Tipo.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= BOOL 
            {
              Tipo RESULT = null;
		 RESULT = Tipo.BOOL; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= ENT 
            {
              Tipo RESULT = null;
		 RESULT = Tipo.ENT; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TipoG ::= ARRAY Dimension Tipo 
            {
              TipoG RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dimension d = (Dimension)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Arreglo(d, t, tleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*TipoG*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TipoG ::= Tipo 
            {
              TipoG RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TipoG(t, tleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*TipoG*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decl_variable ::= DECLVAR IDV TIPVAR TipoG 
            {
              Decl RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoG t = (TipoG)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Decl(i, t, 0, tleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Decl_variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Mientras ::= WHILE PAP Expresion PCI CORCHAPERTURA Bloque CORCHCIERRE 
            {
              InstWh RESULT = null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr eb = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstWh(eb, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Mientras*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Suponiendo ::= IF PAP Expresion PCI CORCHAPERTURA Bloque CORCHCIERRE ELSE CORCHAPERTURA Bloque CORCHCIERRE 
            {
              InstIf RESULT = null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expr eb = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Lista b1 = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista b2 = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIf(eb, b1, b2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Suponiendo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Suponiendo ::= IF PAP Expresion PCI CORCHAPERTURA Bloque CORCHCIERRE 
            {
              InstIf RESULT = null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr eb = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIf(eb, b, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Suponiendo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= Asignacion FIN 
            {
              Generic RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstAsign a = (InstAsign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= Invocacion FIN 
            {
              Generic RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstDo i = (InstDo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= Mientras 
            {
              Generic RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		InstWh m = (InstWh)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = m; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= Suponiendo 
            {
              Generic RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		InstIf s = (InstIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= Decl_funcion 
            {
              Generic RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DeclF d = (DeclF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= Decl_variable FIN 
            {
              Generic RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Bloque ::= Bloque Sentencia 
            {
              Lista RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Generic s = (Generic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 b.add(s); RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bloque ::= Sentencia 
            {
              Lista RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Generic s = (Generic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_decl_func ::= Decl_funcion 
            {
              Lista RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DeclF d = (DeclF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Lista_decl_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_decl_func ::= Lista_decl_func Decl_funcion 
            {
              Lista RESULT = null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista li = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DeclF d = (DeclF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 li.add(d); RESULT = li; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Lista_decl_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Lista_decl_func 
            {
              Lista RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista start_val = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


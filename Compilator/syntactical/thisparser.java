
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Apr 19 23:28:54 CEST 2018
//----------------------------------------------------

package syntactical;

import lexical.Lexanalizer;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
//import errors.ErrorSintactico;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import items.basic.*;
import items.conjuntos.*;
import items.declaraciones.*;
import items.expresiones.*;
import items.instrucciones.*;

/** CUP v0.10k generated parser.
  * @version Thu Apr 19 23:28:54 CEST 2018
  */
public class thisparser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public thisparser() {super();}

  /** Constructor which sets the default scanner. */
  public thisparser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s, sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\003\003\000\002\021" +
    "\004\000\002\021\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\010\011\000\002" +
    "\010\015\000\002\011\011\000\002\006\006\000\002\025" +
    "\003\000\002\025\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\005\000\002\027\005\000\002\012\010\000\002" +
    "\023\005\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\030\006\000\002\030\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\013\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\014\003\000\002\014" +
    "\004\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\015\003\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\007" +
    "\025\000\002\022\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\016\007\001\002\000\006\002\ufffe\016" +
    "\ufffe\001\002\000\004\002\176\001\002\000\006\002\000" +
    "\016\007\001\002\000\004\053\010\001\002\000\004\017" +
    "\011\001\002\000\004\010\012\001\002\000\012\006\021" +
    "\034\020\035\017\036\015\001\002\000\006\007\uffc9\011" +
    "\uffc9\001\002\000\010\007\ufff2\011\ufff2\033\ufff2\001\002" +
    "\000\012\007\ufff0\011\ufff0\021\ufff0\033\ufff0\001\002\000" +
    "\006\007\032\011\033\001\002\000\012\007\uffef\011\uffef" +
    "\021\uffef\033\uffef\001\002\000\012\007\uffee\011\uffee\021" +
    "\uffee\033\uffee\001\002\000\006\054\025\055\023\001\002" +
    "\000\012\012\uffec\034\uffec\035\uffec\036\uffec\001\002\000" +
    "\012\012\uffed\034\uffed\035\uffed\036\uffed\001\002\000\012" +
    "\012\027\034\020\035\017\036\015\001\002\000\050\007" +
    "\uffe1\011\uffe1\012\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\001\002" +
    "\000\010\007\ufff1\011\ufff1\033\ufff1\001\002\000\006\054" +
    "\025\055\031\001\002\000\012\012\uffea\034\uffea\035\uffea" +
    "\036\uffea\001\002\000\012\012\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\001\002\000\012\006\021\034\020\035\017\036\015" +
    "\001\002\000\004\020\034\001\002\000\010\034\020\035" +
    "\017\036\015\001\002\000\004\021\036\001\002\000\004" +
    "\010\037\001\002\000\012\053\045\054\025\056\043\057" +
    "\046\001\002\000\010\007\uffe6\011\uffe6\032\uffe6\001\002" +
    "\000\010\007\uffe7\011\uffe7\032\uffe7\001\002\000\006\007" +
    "\052\011\055\001\002\000\040\007\uffe0\011\uffe0\032\uffe0" +
    "\033\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\001\002" +
    "\000\010\007\uffe5\011\uffe5\032\uffe5\001\002\000\044\007" +
    "\uffe2\011\uffe2\015\uffe2\031\050\032\uffe2\033\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\051\uffe2\052\uffe2\001\002\000\040\007\uffdf" +
    "\011\uffdf\032\uffdf\033\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf" +
    "\052\uffdf\001\002\000\010\007\uffe4\011\uffe4\032\uffe4\001" +
    "\002\000\012\053\045\054\025\056\043\057\046\001\002" +
    "\000\006\007\052\032\053\001\002\000\012\053\045\054" +
    "\025\056\043\057\046\001\002\000\042\007\uffe3\011\uffe3" +
    "\015\uffe3\032\uffe3\033\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3" +
    "\052\uffe3\001\002\000\010\007\uffe8\011\uffe8\032\uffe8\001" +
    "\002\000\004\022\056\001\002\000\004\013\057\001\002" +
    "\000\014\004\073\024\067\026\072\030\062\053\045\001" +
    "\002\000\004\033\173\001\002\000\004\015\171\001\002" +
    "\000\004\010\163\001\002\000\016\004\073\023\157\024" +
    "\067\026\072\030\062\053\045\001\002\000\004\033\156" +
    "\001\002\000\004\033\155\001\002\000\020\004\ufff9\014" +
    "\ufff9\023\ufff9\024\ufff9\026\ufff9\030\ufff9\053\ufff9\001\002" +
    "\000\004\053\150\001\002\000\020\004\ufffd\014\ufffd\023" +
    "\ufffd\024\ufffd\026\ufffd\030\ufffd\053\ufffd\001\002\000\020" +
    "\004\ufffa\014\ufffa\023\ufffa\024\ufffa\026\ufffa\030\ufffa\053" +
    "\ufffa\001\002\000\004\010\077\001\002\000\004\053\074" +
    "\001\002\000\004\005\075\001\002\000\012\006\021\034" +
    "\020\035\017\036\015\001\002\000\004\033\ufff3\001\002" +
    "\000\016\024\067\050\105\053\045\054\025\056\043\057" +
    "\046\001\002\000\034\011\uffda\033\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\051\uffda\052\uffda\001\002\000\034\011\uffdb\033\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\001\002\000\034" +
    "\011\uffcf\033\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf" +
    "\001\002\000\034\011\uffdc\033\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\051\uffdc\052\uffdc\001\002\000\032\011\137\037\116\040" +
    "\113\041\115\042\121\043\117\044\114\045\111\046\112" +
    "\047\122\051\123\052\120\001\002\000\016\024\067\050" +
    "\105\053\045\054\025\056\043\057\046\001\002\000\034" +
    "\011\uffdd\033\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd" +
    "\001\002\000\034\011\uffd9\033\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\052\uffd9\001\002\000\034\011\uffd8\033\uffd8\037" +
    "\116\040\113\041\115\042\121\043\117\044\114\045\111" +
    "\046\112\047\122\051\123\052\120\001\002\000\016\024" +
    "\067\050\105\053\045\054\025\056\043\057\046\001\002" +
    "\000\016\024\067\050\105\053\045\054\025\056\043\057" +
    "\046\001\002\000\016\024\067\050\105\053\045\054\025" +
    "\056\043\057\046\001\002\000\016\024\067\050\105\053" +
    "\045\054\025\056\043\057\046\001\002\000\016\024\067" +
    "\050\105\053\045\054\025\056\043\057\046\001\002\000" +
    "\016\024\067\050\105\053\045\054\025\056\043\057\046" +
    "\001\002\000\016\024\067\050\105\053\045\054\025\056" +
    "\043\057\046\001\002\000\016\024\067\050\105\053\045" +
    "\054\025\056\043\057\046\001\002\000\016\024\067\050" +
    "\105\053\045\054\025\056\043\057\046\001\002\000\016" +
    "\024\067\050\105\053\045\054\025\056\043\057\046\001" +
    "\002\000\016\024\067\050\105\053\045\054\025\056\043" +
    "\057\046\001\002\000\034\011\uffd6\033\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\121\043\117\044\114\045\111\046\112" +
    "\047\122\051\uffd6\052\uffd6\001\002\000\034\011\uffd4\033" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\001\002\000" +
    "\034\011\uffd5\033\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052" +
    "\uffd5\001\002\000\034\011\uffd7\033\uffd7\037\116\040\113" +
    "\041\uffd7\042\121\043\117\044\114\045\111\046\112\047" +
    "\122\051\123\052\uffd7\001\002\000\034\011\uffd2\033\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\121\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\122\051\uffd2\052\uffd2\001\002\000\034" +
    "\011\uffce\033\uffce\037\uffce\040\uffce\041\uffce\042\121\043" +
    "\117\044\114\045\111\046\112\047\122\051\uffce\052\uffce" +
    "\001\002\000\034\011\uffcc\033\uffcc\037\116\040\113\041" +
    "\uffcc\042\121\043\117\044\114\045\111\046\112\047\122" +
    "\051\123\052\uffcc\001\002\000\034\011\uffd3\033\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\121\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\122\051\uffd3\052\uffd3\001\002\000\034\011" +
    "\uffcd\033\uffcd\037\uffcd\040\uffcd\041\uffcd\042\121\043\117" +
    "\044\114\045\111\046\112\047\122\051\uffcd\052\uffcd\001" +
    "\002\000\034\011\uffd0\033\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\121\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\122\051" +
    "\uffd0\052\uffd0\001\002\000\034\011\uffd1\033\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\121\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\122\051\uffd1\052\uffd1\001\002\000\004\013\140" +
    "\001\002\000\014\004\073\024\067\026\072\030\062\053" +
    "\045\001\002\000\016\004\073\014\143\024\067\026\072" +
    "\030\062\053\045\001\002\000\020\004\ufffc\014\ufffc\023" +
    "\ufffc\024\ufffc\026\ufffc\030\ufffc\053\ufffc\001\002\000\022" +
    "\004\ufff6\014\ufff6\023\ufff6\024\ufff6\026\ufff6\027\144\030" +
    "\ufff6\053\ufff6\001\002\000\004\013\145\001\002\000\014" +
    "\004\073\024\067\026\072\030\062\053\045\001\002\000" +
    "\016\004\073\014\147\024\067\026\072\030\062\053\045" +
    "\001\002\000\020\004\ufff5\014\ufff5\023\ufff5\024\ufff5\026" +
    "\ufff5\030\ufff5\053\ufff5\001\002\000\004\025\151\001\002" +
    "\000\004\010\152\001\002\000\012\053\045\054\025\056" +
    "\043\057\046\001\002\000\006\007\052\011\154\001\002" +
    "\000\034\011\uffe9\033\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9" +
    "\052\uffe9\001\002\000\020\004\ufff7\014\ufff7\023\ufff7\024" +
    "\ufff7\026\ufff7\030\ufff7\053\ufff7\001\002\000\020\004\ufffb" +
    "\014\ufffb\023\ufffb\024\ufffb\026\ufffb\030\ufffb\053\ufffb\001" +
    "\002\000\016\024\067\050\105\053\045\054\025\056\043" +
    "\057\046\001\002\000\032\033\161\037\116\040\113\041" +
    "\115\042\121\043\117\044\114\045\111\046\112\047\122" +
    "\051\123\052\120\001\002\000\004\014\162\001\002\000" +
    "\006\002\uffcb\016\uffcb\001\002\000\016\024\067\050\105" +
    "\053\045\054\025\056\043\057\046\001\002\000\032\011" +
    "\165\037\116\040\113\041\115\042\121\043\117\044\114" +
    "\045\111\046\112\047\122\051\123\052\120\001\002\000" +
    "\004\013\166\001\002\000\014\004\073\024\067\026\072" +
    "\030\062\053\045\001\002\000\016\004\073\014\170\024" +
    "\067\026\072\030\062\053\045\001\002\000\020\004\ufff4" +
    "\014\ufff4\023\ufff4\024\ufff4\026\ufff4\030\ufff4\053\ufff4\001" +
    "\002\000\016\024\067\050\105\053\045\054\025\056\043" +
    "\057\046\001\002\000\032\033\uffde\037\116\040\113\041" +
    "\115\042\121\043\117\044\114\045\111\046\112\047\122" +
    "\051\123\052\120\001\002\000\020\004\ufff8\014\ufff8\023" +
    "\ufff8\024\ufff8\026\ufff8\030\ufff8\053\ufff8\001\002\000\006" +
    "\007\uffca\011\uffca\001\002\000\006\002\uffff\016\uffff\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\010\003\004\007\003\021\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\015\025\012\026\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\021\027\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\173\026\013\001\001\000\002\001\001\000\004" +
    "\026\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\043\020\046\023\041\024\040\030\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\043\020\046\023" +
    "\050\024\040\030\037\001\001\000\002\001\001\000\012" +
    "\017\043\020\046\024\053\030\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\062\005\067\006\063\010\070\011\065\012" +
    "\057\013\064\030\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\141\006\063\010" +
    "\070\011\065\012\057\013\064\030\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\075\026" +
    "\013\001\001\000\002\001\001\000\020\012\077\014\105" +
    "\015\102\016\103\017\101\020\106\030\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\077\014\105\015" +
    "\102\016\107\017\101\020\106\030\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\012" +
    "\077\014\105\015\102\016\135\017\101\020\106\030\100" +
    "\001\001\000\020\012\077\014\105\015\102\016\134\017" +
    "\101\020\106\030\100\001\001\000\020\012\077\014\105" +
    "\015\102\016\133\017\101\020\106\030\100\001\001\000" +
    "\020\012\077\014\105\015\102\016\132\017\101\020\106" +
    "\030\100\001\001\000\020\012\077\014\105\015\102\016" +
    "\131\017\101\020\106\030\100\001\001\000\020\012\077" +
    "\014\105\015\102\016\130\017\101\020\106\030\100\001" +
    "\001\000\020\012\077\014\105\015\102\016\127\017\101" +
    "\020\106\030\100\001\001\000\020\012\077\014\105\015" +
    "\102\016\126\017\101\020\106\030\100\001\001\000\020" +
    "\012\077\014\105\015\102\016\125\017\101\020\106\030" +
    "\100\001\001\000\020\012\077\014\105\015\102\016\124" +
    "\017\101\020\106\030\100\001\001\000\020\012\077\014" +
    "\105\015\102\016\123\017\101\020\106\030\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\140" +
    "\005\067\006\063\010\070\011\065\012\057\013\064\030" +
    "\060\001\001\000\020\005\141\006\063\010\070\011\065" +
    "\012\057\013\064\030\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\145\005\067" +
    "\006\063\010\070\011\065\012\057\013\064\030\060\001" +
    "\001\000\020\005\141\006\063\010\070\011\065\012\057" +
    "\013\064\030\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\043\020\046\023\152" +
    "\024\040\030\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\077" +
    "\014\105\015\102\016\157\017\101\020\106\030\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\077\014\105\015\102\016\163\017\101\020" +
    "\106\030\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\166\005\067\006\063\010\070\011\065\012" +
    "\057\013\064\030\060\001\001\000\020\005\141\006\063" +
    "\010\070\011\065\012\057\013\064\030\060\001\001\000" +
    "\002\001\001\000\020\012\077\014\105\015\102\016\171" +
    "\017\101\020\106\030\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   Lexanalizer alex = (Lexanalizer)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	return getScanner().next_token();

    }


public void syntax_error(Symbol unidadLexica){
				//ErrorSintactico.errorSintactico(unidadLexica);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final thisparser parser;

  /** Constructor */
  CUP$parser$actions(thisparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Lista_tipos ::= TipoG 
            {
              Lista RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoG t = (TipoG)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista("T",t); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Lista_tipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Lista_tipos ::= Lista_tipos SEP TipoG 
            {
              Lista RESULT = null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lista lt = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoG t = (TipoG)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 lt.add(t); RESULT = lt; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Lista_tipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Decl_funcion ::= PRINCFUN IDV ENTRTIPFUNC PAP Lista_tipos PCI SALTIPFUNC Tipo ENTRIMPLFUNC PAP Lista_vars PCI SALIMPLFUNC CORCHAPERTURA Bloque RESULTADO Expresion FIN CORCHCIERRE 
            {
              DeclF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Lista lt = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Lista lv = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclF(i, lt, t, lv, b, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Decl_funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion_aritmetica ::= Expresion POR Expresion 
            {
              ExprA RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprA(e1, e2, Operadores.POR); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Expresion_aritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion_aritmetica ::= Expresion MENOS Expresion 
            {
              ExprA RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprA(e1, e2, Operadores.MENOS); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Expresion_aritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion_aritmetica ::= Expresion MAS Expresion 
            {
              ExprA RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprA(e1, e2, Operadores.MAS); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Expresion_aritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion_aritmetica ::= Constante_aritmetica 
            {
              ExprA RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NumConst c = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprA(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Expresion_aritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion_booleana ::= Expresion MAYOROIGUAL Expresion 
            {
              ExprB RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(e1, e2, Operadores.MAYOROIGUAL); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion_booleana ::= Expresion MENOROIGUAL Expresion 
            {
              ExprB RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(e1, e2, Operadores.MENOROIGUAL); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion_booleana ::= Expresion MAYOR Expresion 
            {
              ExprB RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(e1, e2, Operadores.MAYOR); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion_booleana ::= Expresion MENOR Expresion 
            {
              ExprB RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(e1, e2, Operadores.MENOR); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion_booleana ::= Expresion DIFF Expresion 
            {
              ExprB RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(e1, e2, Operadores.DIFF); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion_booleana ::= Expresion IGUAL Expresion 
            {
              ExprB RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(e1, e2, Operadores.IGUAL); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion_booleana ::= Expresion DIS Expresion 
            {
              ExprB RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(e1, e2, Operadores.DIS); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion_booleana ::= Expresion CON Expresion 
            {
              ExprB RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(e1, e2, Operadores.CON); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion_booleana ::= NEG Expresion 
            {
              ExprB RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new ExprB(e, Operadores.NEG); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion_booleana ::= Constante_booleana 
            {
              ExprB RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		BoolConst b = (BoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprB(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Expresion_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= Invocacion 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		InstDo i = (InstDo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= Variable 
            {
              Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Expr(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= Expresion_aritmetica 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExprA e = (ExprA)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= Expresion_booleana 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExprB e = (ExprB)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Asignacion ::= Variable ASIGN Expresion 
            {
              InstAsign RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new InstAsign(v, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Constante_booleana ::= FALSE 
            {
              BoolConst RESULT = null;
		 RESULT = new BoolConst(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Constante_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Constante_booleana ::= TRUE 
            {
              BoolConst RESULT = null;
		 RESULT = new BoolConst(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Constante_booleana*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Constante_aritmetica ::= NUMENT 
            {
              NumConst RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NumConst(n); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Constante_aritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Variable ::= IDV 
            {
              Variable RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Variable(i, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Variable ::= IDV ACCESO Lista_vars CIERRE 
            {
              Variable RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista l = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Variable(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Valor ::= Constante_booleana 
            {
              Valor RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		BoolConst c = (BoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Valor(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Valor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Valor ::= Constante_aritmetica 
            {
              Valor RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NumConst c = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Valor(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Valor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Valor ::= Variable 
            {
              Valor RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Variable i = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Valor(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Valor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_vars ::= Valor 
            {
              Lista RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista("V",v); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Lista_vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lista_vars ::= Lista_vars SEP Valor 
            {
              Lista RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lista l = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(v); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Lista_vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Invocacion ::= LLAMADA IDV PARAM PAP Lista_vars PCI 
            {
              InstDo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista p = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstDo(i, p); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Invocacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dimension ::= Dimension DIMSEP Constante_aritmetica 
            {
              Dimension RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dimension d = (Dimension)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NumConst c = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Dimension(new ConcreteDimension(c), d); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Dimension*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dimension ::= Dimension DIMSEP WILDCARD 
            {
              Dimension RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dimension d = (Dimension)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Dimension(new Wildcard(), d); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Dimension*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dimension ::= Constante_aritmetica 
            {
              Dimension RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NumConst c = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ConcreteDimension(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Dimension*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Dimension ::= WILDCARD 
            {
              Dimension RESULT = null;
		 RESULT = new Wildcard(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Dimension*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= NULL 
            {
              Tipo RESULT = null;
		 RESULT = Tipo.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= BOOL 
            {
              Tipo RESULT = null;
		 RESULT = Tipo.BOOL; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= ENT 
            {
              Tipo RESULT = null;
		 RESULT = Tipo.ENT; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TipoG ::= ARRAY Dimension Tipo 
            {
              TipoG RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dimension d = (Dimension)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Arreglo(d, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*TipoG*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TipoG ::= Tipo 
            {
              TipoG RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TipoG(t); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*TipoG*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decl_variable ::= DECLVAR IDV TIPVAR TipoG 
            {
              Decl RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoG t = (TipoG)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Decl(i, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Decl_variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Mientras ::= WHILE PAP Expresion PCI CORCHAPERTURA Bloque CORCHCIERRE 
            {
              InstWh RESULT = null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr eb = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstWh(eb, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Mientras*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Suponiendo ::= IF PAP Expresion PCI CORCHAPERTURA Bloque CORCHCIERRE ELSE CORCHAPERTURA Bloque CORCHCIERRE 
            {
              InstIf RESULT = null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expr eb = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Lista b1 = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista b2 = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIf(eb, b1, b2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Suponiendo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Suponiendo ::= IF PAP Expresion PCI CORCHAPERTURA Bloque CORCHCIERRE 
            {
              InstIf RESULT = null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr eb = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIf(eb, b, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Suponiendo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= Asignacion FIN 
            {
              Generic RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstAsign a = (InstAsign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= Invocacion FIN 
            {
              Generic RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstDo i = (InstDo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= Mientras 
            {
              Generic RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		InstWh m = (InstWh)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = m; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= Suponiendo 
            {
              Generic RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		InstIf s = (InstIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= Decl_variable FIN 
            {
              Generic RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Bloque ::= Bloque Sentencia 
            {
              Lista RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Generic s = (Generic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 b.add(s); RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bloque ::= Sentencia 
            {
              Lista RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Generic s = (Generic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista("G",s); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_decl_func ::= Decl_funcion 
            {
              Lista RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DeclF d = (DeclF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Lista("D",d); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Lista_decl_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_decl_func ::= Lista_decl_func Decl_funcion 
            {
              Lista RESULT = null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista li = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DeclF d = (DeclF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 li.add(d); RESULT = li; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Lista_decl_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Lista_decl_func 
            {
              Lista RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Lista b = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lista start_val = (Lista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

